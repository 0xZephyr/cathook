#!/usr/bin/env bash

# $1 Auto updater
# $2 Disable TUI

set -e

configfile="./scripts/updater-preferences"

if [ $(id -u) -eq 0 ]; then
    echo -e "\033[1;33m \n \nThis script must'nt be run as root!\n\033[0m"
    exit 1
fi

LOCKFILE=/tmp/chupdater.lock
if [ -e ${LOCKFILE} ] && ps -p `cat ${LOCKFILE}` >/dev/null; then
    echo -e "\033[1;33m \n \nUpdater: Updater already running!\n\033[0m"
    exit 1
fi

# make sure the lockfile is removed when we exit and then claim it
trap "rm -f ${LOCKFILE}; exit" INT TERM EXIT
echo $$ > ${LOCKFILE}

# Run migrations 
./scripts/migrations "$@" || exit 0

#Check if all required packages are installed
./scripts/dependencycheck

. ./scripts/config.shlib

tui=true
if [ ! -t 0 ]; then
    tui=false
fi
if [ "$2" == "true" ]; then
    tui=false
fi
if [ ! -x "$(command -v dialog)" ] && [ "$tui" == true ]; then
    tui=false
    echo -e "\033[1;31mTerminal UI NOT supported! Install \"dialog\"! \033[0m"
fi

exists=true
cfg_haskey $configfile autoupdater || exists=false
if [ "$tui" == true ] && [ "$exists" == false ]; then
    value=true
    response=255
    while [ "$response" != 0 ] && [ "$response" != 1 ]; do
        dialog --keep-tite --title "Updater"  --yesno "Do you want to enable the cathook auto updater?" 10 25 || { response=$?; continue; }
        response=$?
    done
    if [ "$response" == 1 ]; then
        value=false
    fi
    cfg_write $configfile autoupdater $value
fi

exists=true
cfg_haskey $configfile autoupdater || exists=false
if [ "$1" == "true" ]; then
    if [ $exists == false ] || [ "$(cfg_read $configfile autoupdater)" == false ]; then
        exit 0;
    fi
    AUTOUPDATER=true
    tui=false
    echo -e "\033[1;34m \n \nAuto Updater: Updating cathook in the background\n\033[0m"
fi

function performupdate() {
    #get update channel from config
    update_channel="$(cfg_read $configfile update_channel)"
    
    if [ "$update_channel" == "stable" ]; then
        git fetch --force --depth 1 origin refs/tags/latest:refs/tags/latest && git reset --hard latest && git submodule update --depth 1 --init --recursive || { echo -e "\033[1;33m\nFailed to pull from github! Trying alternative pull (legacy)\n\033[0m"; git fetch --depth 1 && git reset --hard @{upstream} && git submodule update --depth 1 --init --recursive || { echo -e "\033[1;31m\nFailed to pull from github! A reinstall is recommended. https://github.com/nullworks/cathook\n\033[0m"; exit 1; } }
    elif [ "$update_channel" == "master" ]; then
        git fetch --force --depth 1 origin && git reset --hard origin/master && git submodule update --depth 1 --init --recursive || { echo -e "\033[1;33m\nFailed to pull from github! Trying alternative pull (legacy)\n\033[0m"; git fetch --depth 1 && git reset --hard @{upstream} && git submodule update --depth 1 --init --recursive || { echo -e "\033[1;31m\nFailed to pull from github! A reinstall is recommended. https://cathook.club\n\033[0m"; exit 1; } }
    elif [ "$update_channel" == "developer" ]; then
        echo -e "\033[1;33m\nWarning! Running in developer mode! Expect issues!\n\033[0m" && git pull origin && git submodule update --init --recursive || { echo -e "\033[1;31m\n\nFailed to pull from github!\n\033[0m"; exit 1; }
    else
        if [ "$tui" == true ]; then
            value=true
            dialog --keep-tite --title "Updater"  --yesno "Unknown update channel. Restore to stable update channel?" 10 25 || value=false
            if [ "$value" == true ]; then
                cfg_write $configfile update_channel stable
            fi
        fi
        exit 1
    fi
    
    # Run migrations 
    ./scripts/migrations "$@" || exit 0
    
    proccount=$(grep -c '^processor' /proc/cpuinfo)
    if [ "$AUTOUPDATER" == true ]; then
        proccount=1
    fi
    
    #Create build folder in case it doesn't exist
    mkdir -p ./build
    # Update cathook
    cd build && cmake .. && cmake --build . --target cathook -- -j$proccount || { echo -e "\033[1;31m \n \nFailed to compile cathook\n\033[0m"; exit 1; }
    # Update data
    cmake --build . --target data || { echo -e "\033[1;31m\nFailed to update /opt/cathook/data directory! Trying with root rights!\n\033[0m"; sudo cmake --build . --target data || { echo -e "\033[1;31m\nFailed to update /opt/cathook/data directory\n\033[0m"; exit 1; } }
    echo -e "\n\033[1;34mCathook updated successfully\n\033[0m"
    rm -f ${LOCKFILE}
}

if [ $AUTOUPDATER ]; then
    performupdate &
else
    performupdate
fi
